// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.PlaylistManager = (function() {
    function PlaylistManager(ref) {
      this.ref = ref;
      this.onPlayerReady = __bind(this.onPlayerReady, this);
      this.onPlayerStateChange = __bind(this.onPlayerStateChange, this);
      this.updateDom = __bind(this.updateDom, this);
      this.updateCarousel = __bind(this.updateCarousel, this);
      this.updateTexts = __bind(this.updateTexts, this);
      this.updateThumbs = __bind(this.updateThumbs, this);
      this.setControls = __bind(this.setControls, this);
      this.onYouTubeIframeAPIReady = __bind(this.onYouTubeIframeAPIReady, this);
      this.createCarousel = __bind(this.createCarousel, this);
      this.createPlayer = __bind(this.createPlayer, this);
      this.onVideosLoaded = __bind(this.onVideosLoaded, this);
      this.loadVideosInDetails = __bind(this.loadVideosInDetails, this);
      this.onPlaylistLoaded = __bind(this.onPlaylistLoaded, this);
      this.initPlaylist = __bind(this.initPlaylist, this);
      this.max = 50;
      this.videos = [];
      this.b = $('body');
      this.next = $('.videoPaginator__next');
      this.prev = $('.videoPaginator__previous');
      this.title = $('.js-ytItem__title');
      this.description = $('.js-ytItem__description');
      this.carousel_ref = $('.js-carousel');
      this.carousel = this.carousel_ref.find('.row--sliderAux ul');
      this.has_no_playlist = this.ref.hasClass('noPlaylist');
      this.videoId = this.ref.attr('data-videoid');
      this.playlistId = this.ref.attr('data-playlist');
      this.playerId = this.ref.find('.js-player').attr('id');
      this.index = 0;
      this.playlistItems = [];
      if (this.has_no_playlist) {
        this.videos.push(this.videoId);
        this.next.hide();
        this.prev.hide();
        this.loadVideosInDetails();
      } else {
        this.initPlaylist();
      }
    }

    PlaylistManager.prototype.initPlaylist = function() {
      return $.ajax({
        type: "GET",
        url: window.helpers.getReqPlaylistItemsUrl(),
        dataType: 'jsonp',
        data: {
          part: 'contentDetails',
          playlistId: this.playlistId,
          key: window.helpers.getAPIkey(),
          maxResults: this.max
        },
        success: (function(_this) {
          return function(data) {
            if (data !== null) {
              return _this.onPlaylistLoaded(data);
            }
          };
        })(this),
        error: function(e) {
          return console.log(e.message);
        }
      });
    };

    PlaylistManager.prototype.onPlaylistLoaded = function(data) {
      var i, id, itemsData, _data, _i, _ref;
      itemsData = data['items'];
      for (i = _i = 0, _ref = itemsData.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _data = itemsData[i];
        id = _data.contentDetails.videoId;
        this.videos.push(id);
      }
      return this.loadVideosInDetails();
    };

    PlaylistManager.prototype.loadVideosInDetails = function() {
      return $.ajax({
        type: "GET",
        url: window.helpers.getReqVideosListUrl(),
        dataType: 'jsonp',
        data: {
          part: 'id, snippet, contentDetails',
          id: this.videos.join(),
          key: window.helpers.getAPIkey()
        },
        success: (function(_this) {
          return function(data) {
            if (data !== null) {
              return _this.onVideosLoaded(data);
            }
          };
        })(this),
        error: function(e) {
          return console.log(e.message);
        }
      });
    };

    PlaylistManager.prototype.onVideosLoaded = function(data) {
      var contentDetails, description, duration, i, id, itemsData, snippet, thumbnails, title, _data, _i, _ref;
      itemsData = data['items'];
      for (i = _i = 0, _ref = itemsData.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _data = itemsData[i];
        id = _data.id;
        snippet = _data.snippet;
        description = snippet.description;
        title = snippet.title;
        thumbnails = snippet.thumbnails;
        contentDetails = _data.contentDetails;
        duration = window.helpers.convertISOtoDuration(contentDetails.duration);
        if (id === this.videoId) {
          this.index = i;
        }
        this.playlistItems.push({
          videoId: id,
          title: title,
          description: description,
          thumbnails: thumbnails,
          duration: duration
        });
      }
      if (!this.has_no_playlist) {
        this.createCarousel();
      }
      this.createPlayer();
      return window.helpers.setIframeHeight();
    };

    PlaylistManager.prototype.createPlayer = function() {
      window.helpers.createPlayerAPI();
      return window.onYouTubeIframeAPIReady = this.onYouTubeIframeAPIReady;
    };

    PlaylistManager.prototype.createCarousel = function() {
      var carousel_item, carousel_item_new, i, _i, _ref;
      carousel_item = this.carousel.find('.js-carousel__item');
      this.totalItems = this.playlistItems.length;
      for (i = _i = 0, _ref = this.playlistItems.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        carousel_item_new = carousel_item.clone().appendTo(this.carousel);
        carousel_item_new.attr('data-videoid', "" + this.playlistItems[i].videoId);
        carousel_item_new.find('.ytItem__image >img').attr('src', "" + this.playlistItems[i].thumbnails.medium.url);
        carousel_item_new.find('.js-ytItem__counter').html("" + this.playlistItems[i].duration);
        carousel_item_new.find('.js-ytItem__title').html("" + this.playlistItems[i].title);
        carousel_item_new.click((function(_this) {
          return function(e) {
            var _current_item, _id;
            e.preventDefault();
            _current_item = $(e.currentTarget);
            if (!_current_item.hasClass('is-playing')) {
              _id = _current_item.attr('data-videoid');
              _this.index = _this.carousel.find('>li').index(_current_item);
              _this.player.loadVideoById(_this.playlistItems[_this.index].videoId);
              return _this.updateDom();
            }
          };
        })(this));
      }
      carousel_item.remove();
      return new Carousel(this.carousel_ref);
    };

    PlaylistManager.prototype.onYouTubeIframeAPIReady = function() {
      this.player = new YT.Player(this.playerId, {
        height: '100%',
        width: '100%',
        videoId: this.videoId,
        playerVars: {
          controls: 1,
          rel: 0,
          showinfo: 0,
          cc_load_policy: 0,
          autoplay: 0,
          enablejsapi: 1
        },
        events: {
          'onReady': this.onPlayerReady,
          'onStateChange': this.onPlayerStateChange
        }
      });
      if (this.has_no_playlist) {
        return this.updateTexts();
      } else {
        this.setControls();
        return this.updateDom();
      }
    };

    PlaylistManager.prototype.setControls = function() {
      this.next.click((function(_this) {
        return function(e) {
          e.preventDefault();
          _this.index = _this.index + 1 === _this.playlistItems.length ? 0 : _this.index + 1;
          _this.player.loadVideoById(_this.playlistItems[_this.index].videoId);
          return _this.updateDom();
        };
      })(this));
      return this.prev.click((function(_this) {
        return function(e) {
          e.preventDefault();
          _this.index = _this.index - 1 === -1 ? _this.playlistItems.length - 1 : _this.index - 1;
          _this.player.loadVideoById(_this.playlistItems[_this.index].videoId);
          return _this.updateDom();
        };
      })(this));
    };

    PlaylistManager.prototype.updateThumbs = function() {
      var next, prev;
      prev = this.index === 0 ? this.playlistItems.length - 1 : this.index - 1;
      next = this.index === this.playlistItems.length - 1 ? 0 : this.index + 1;
      this.next.find('.videoPaginator__thumb >img').attr('src', this.playlistItems[next].thumbnails.medium['url']);
      return this.prev.find('.videoPaginator__thumb >img').attr('src', this.playlistItems[prev].thumbnails.medium['url']);
    };

    PlaylistManager.prototype.updateTexts = function() {
      this.title.html(this.playlistItems[this.index].title);
      if (this.playlistItems[this.index].description === '' || (this.playlistItems[this.index].description == null)) {
        return this.description.hide();
      } else {
        this.description.show();
        return this.description.html(this.playlistItems[this.index].description);
      }
    };

    PlaylistManager.prototype.updateCarousel = function() {
      var c_item, carousel_item, i, _i, _ref, _results;
      carousel_item = this.carousel.find('.js-carousel__item');
      _results = [];
      for (i = _i = 0, _ref = carousel_item.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        c_item = $(carousel_item[i]);
        if (c_item.attr('data-videoid') === this.playlistItems[this.index].videoId) {
          _results.push(c_item.addClass('is-playing'));
        } else {
          _results.push(c_item.removeClass('is-playing'));
        }
      }
      return _results;
    };

    PlaylistManager.prototype.updateDom = function() {
      this.updateThumbs();
      this.updateTexts();
      this.updateCarousel();
      return window.helpers.setIframeHeight();
    };

    PlaylistManager.prototype.onPlayerStateChange = function(state) {};

    PlaylistManager.prototype.onPlayerReady = function() {};

    return PlaylistManager;

  })();

}).call(this);
