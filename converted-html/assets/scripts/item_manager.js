// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.ItemManager = (function() {
    function ItemManager(ref) {
      this.ref = ref;
      this.checkAllVideos = __bind(this.checkAllVideos, this);
      this.onPlayerStateChange = __bind(this.onPlayerStateChange, this);
      this.onPlayerReady = __bind(this.onPlayerReady, this);
      this.onYouTubeIframeAPIReady = __bind(this.onYouTubeIframeAPIReady, this);
      this.onDataLoaded = __bind(this.onDataLoaded, this);
      this.loadItems = __bind(this.loadItems, this);
      this.initItems = __bind(this.initItems, this);
      this.b = $('body');
      this.dom_items = this.ref.find('.js-ytItem');
      this.videos = [];
      this.items = [];
      this.playerList = [];
      this.initItems();
    }

    ItemManager.prototype.initItems = function() {
      var ditem, i, item_has_image, item_has_title, item_playlistId, item_size, item_type, item_videoId, _i, _ref;
      for (i = _i = 0, _ref = this.dom_items.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        ditem = $(this.dom_items[i]);
        item_type = ditem.attr('data-type');
        item_videoId = ditem.attr('data-videoid');
        item_playlistId = ditem.attr('data-playlist');
        item_size = ditem.attr('data-size') != null ? window.helpers.covertDataSize(ditem.attr('data-size')) : 'no-size';
        item_has_image = ditem.hasClass('hasImage') ? true : false;
        item_has_title = ditem.hasClass('hasTitle') ? true : false;
        this.videos.push(item_videoId);
        this.items.push({
          'item': ditem,
          'videoId': item_videoId,
          'playlistId': item_playlistId,
          'type': item_type,
          'size': item_size,
          'hasImage': item_has_image,
          'hasTitle': item_has_title
        });
      }
      return this.loadItems();
    };

    ItemManager.prototype.loadItems = function() {
      return $.ajax({
        type: "GET",
        url: window.helpers.getReqVideosListUrl(),
        dataType: 'jsonp',
        data: {
          part: 'id, snippet, contentDetails',
          id: this.videos.join(),
          key: window.helpers.getAPIkey()
        },
        success: (function(_this) {
          return function(data) {
            if (data !== null) {
              return _this.onDataLoaded(data);
            }
          };
        })(this),
        error: function(e) {
          return console.log(e.message);
        }
      });
    };

    ItemManager.prototype.onDataLoaded = function(data) {
      var contentDetails, description, duration, i, id, itemsData, j, snippet, thumbnails, title, _data, _hasImage, _hasTitle, _i, _id, _item, _j, _ref, _ref1, _size, _type;
      itemsData = data['items'];
      for (i = _i = 0, _ref = itemsData.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _data = itemsData[i];
        id = _data.id;
        snippet = _data.snippet;
        description = snippet.description;
        title = snippet.title;
        thumbnails = snippet.thumbnails;
        contentDetails = _data.contentDetails;
        duration = window.helpers.convertISOtoDuration(contentDetails.duration);
        for (j = _j = 0, _ref1 = this.items.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          _item = this.items[j].item;
          _id = this.items[j].videoId;
          _type = this.items[j].type;
          _hasImage = this.items[j].hasImage;
          _hasTitle = this.items[j].hasTitle;
          _size = this.items[j].size;
          if (_id === id) {
            if (!_hasTitle) {
              _item.find('.js-ytItem__title').html(title);
            }
            switch (_type) {
              case 'image':
                if (!_hasImage) {
                  if (_size !== 'no-size') {
                    if (thumbnails["" + this.items[j].size] != null) {
                      _item.find('.ytItem__image >img').attr('src', thumbnails["" + this.items[j].size]['url']);
                    } else {
                      _item.find('.ytItem__image >img').attr('src', thumbnails["medium"]['url']);
                    }
                  }
                }
                _item.find('.js-ytItem__counter').html(duration);
                break;
              case 'video':
                _item.data('is-playing', 'false');
                this.playerList.push({
                  videoId: _id,
                  playerId: _item.find('.js-player').attr('id'),
                  autoPlay: _item.hasClass('js-autoplay') ? 1 : 0
                });
            }
          }
        }
      }
      if (this.playerList.length > 0) {
        window.helpers.createPlayerAPI();
        window.onYouTubeIframeAPIReady = this.onYouTubeIframeAPIReady;
      }
      return window.helpers.setIframeHeight();
    };

    ItemManager.prototype.onYouTubeIframeAPIReady = function() {
      var i, player, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.playerList.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        player = new YT.Player(this.playerList[i].playerId, {
          height: '100%',
          width: '100%',
          videoId: this.playerList[i].videoId,
          playerVars: {
            controls: 1,
            rel: 0,
            showinfo: 0,
            cc_load_policy: 0,
            autoplay: 0
          },
          events: {
            'onReady': this.onPlayerReady,
            'onStateChange': this.onPlayerStateChange
          }
        });
        _results.push(this.playerList[i].playerYT = player);
      }
      return _results;
    };

    ItemManager.prototype.onPlayerReady = function() {};

    ItemManager.prototype.onPlayerStateChange = function(state) {
      var itemId;
      itemId = $(state.target.getIframe()).attr('id');
      if (state.data === 1) {
        $(state.target.getIframe()).data('is-playing', 'true');
        return this.checkAllVideos(itemId);
      }
    };

    ItemManager.prototype.checkAllVideos = function(itemId) {
      var i, player_to_pause, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.playerList.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.playerList[i].playerId !== itemId) {
          player_to_pause = $('#' + this.playerList[i].playerId);
          if (player_to_pause.data('is-playing') === 'true') {
            player_to_pause.data('is-playing', 'false');
            _results.push(this.playerList[i].playerYT.pauseVideo());
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return ItemManager;

  })();

}).call(this);
